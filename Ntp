---
- name: Report NTP skew
  hosts: all
  vars:
    report_file: /tmp/last_report_times.json

  tasks:
    - name: Ensure the report file exists
      ansible.builtin.file:
        path: "{{ report_file }}"
        state: touch

    - name: Read the report file
      slurp:
        src: "{{ report_file }}"
      register: report_file_content

    - name: Set report times variable
      set_fact:
        report_times: "{{ report_file_content.content | b64decode | from_json if report_file_content.content | length > 0 else {} }}"

    - name: Check NTP skew
      shell: ntpdate -q pool.ntp.org | grep offset | awk '{print $10}'
      register: ntp_skew

    - name: Report NTP skew if above threshold and delay time passed
      block:
        - name: Check if host has reported recently
          set_fact:
            last_report_time: "{{ report_times[inventory_hostname] | default(0) }}"

        - name: Calculate time difference
          set_fact:
            time_diff: "{{ (ansible_date_time.epoch | int) - last_report_time }}"

        - name: Report if skew is above threshold and delay has passed
          when: ntp_skew.stdout | float > 0.5 and time_diff >= 300
          block:
            - name: Send email report
              mail:
                to: "recipient@example.com"
                subject: "NTP Skew Alert for {{ inventory_hostname }}"
                body: "Host {{ inventory_hostname }} has an NTP skew of {{ ntp_skew.stdout }} seconds."

            - name: Update the report times
              set_fact:
                report_times_updated: "{{ report_times | combine({ inventory_hostname: ansible_date_time.epoch | int }) }}"

            - name: Write updated report times to file
              copy:
                dest: "{{ report_file }}"
                content: "{{ report_times_updated | to_nice_json }}"
      when: ntp_skew.stdout | float > 0.5

    - name: Report if skew is below threshold and delay has passed
      block:
        - name: Check if host has reported recently
          set_fact:
            last_report_time: "{{ report_times[inventory_hostname] | default(0) }}"

        - name: Calculate time difference
          set_fact:
            time_diff: "{{ (ansible_date_time.epoch | int) - last_report_time }}"

        - name: Report if skew is below threshold and delay has passed
          when: ntp_skew.stdout | float < 0.5 and time_diff >= 300
          block:
            - name: Send email report
              mail:
                to: "recipient@example.com"
                subject: "NTP Skew Alert for {{ inventory_hostname }}"
                body: "Host {{ inventory_hostname }} has an NTP skew of {{ ntp_skew.stdout }} seconds."

            - name: Update the report times
              set_fact:
                report_times_updated: "{{ report_times | combine({ inventory_hostname: ansible_date_time.epoch | int }) }}"

            - name: Write updated report times to file
              copy:
                dest: "{{ report_file }}"
                content: "{{ report_times_updated | to_nice_json }}"
      when: ntp_skew.stdout | float < 0.5





---
- name: Report NTP skew against central domain controller
  hosts: all
  vars:
    report_file: /tmp/last_report_times.json
    domain_controller: "dc.example.com"

  tasks:
    - name: Ensure the report file exists
      ansible.builtin.file:
        path: "{{ report_file }}"
        state: touch

    - name: Read the report file
      slurp:
        src: "{{ report_file }}"
      register: report_file_content

    - name: Set report times variable
      set_fact:
        report_times: "{{ report_file_content.content | b64decode | from_json if report_file_content.content | length > 0 else {} }}"

    - name: Check NTP skew
      shell: ntpdate -q {{ domain_controller }} | grep offset | awk '{print $10}'
      register: ntp_skew

    - name: Check if host has reported recently
      set_fact:
        last_report_time: "{{ report_times[inventory_hostname] | default(0) }}"

    - name: Calculate time difference
      set_fact:
        time_diff: "{{ (ansible_date_time.epoch | int) - last_report_time }}"

    - name: Report if skew is above threshold and delay has passed
      when: ntp_skew.stdout | float > 0.5 and time_diff >= 300
      block:
        - name: Send email report
          mail:
            to: "recipient@example.com"
            subject: "NTP Skew Alert for {{ ansible_host }}"
            body: "Host {{ ansible_host }} (IP: {{ inventory_hostname }}) has an NTP skew of {{ ntp_skew.stdout }} seconds."

        - name: Update the report times
          set_fact:
            report_times_updated: "{{ report_times | combine({ inventory_hostname: ansible_date_time.epoch | int }) }}"

        - name: Write updated report times to file
          copy:
            dest: "{{ report_file }}"
            content: "{{ report_times_updated | to_nice_json }}"

    - name: Report if skew is below threshold and delay has passed
      when: ntp_skew.stdout | float < 0.5 and time_diff >= 300
      block:
        - name: Send email report
          mail:
            to: "recipient@example.com"
            subject: "NTP Skew Alert for {{ ansible_host }}"
            body: "Host {{ ansible_host }} (IP: {{ inventory_hostname }}) has an NTP skew of {{ ntp_skew.stdout }} seconds."

        - name: Update the report times
          set_fact:
            report_times_updated: "{{ report_times | combine({ inventory_hostname: ansible_date_time.epoch | int }) }}"

        - name: Write updated report times to file
          copy:
            dest: "{{ report_file }}"
            content: "{{ report_times_updated | to_nice_json }}"





---
- name: Check NTP time skew and send report
  hosts: all
  gather_facts: no
  tasks:
    - name: Install ntpdate if not present
      ansible.builtin.yum:
        name: ntpdate
        state: present
      become: yes

    - name: Query NTP time skew against the domain controller
      ansible.builtin.command:
        cmd: ntpdate -q your.domain.controller | grep -oP '(?<=offset )[-0-9.]+'
      register: ntp_skew
      changed_when: false

    - name: Set fact for time skew
      ansible.builtin.set_fact:
        time_skew: "{{ ntp_skew.stdout }}"

    - name: Add host and its time skew to the list
      ansible.builtin.set_fact:
        host_skew_list: "{{ host_skew_list | default([]) + [{'host': inventory_hostname, 'skew': time_skew|float }] }}"

- name: Generate and send email report
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Filter time skews greater or less than 0.5 seconds
      ansible.builtin.set_fact:
        filtered_host_skew_list: "{{ host_skew_list | selectattr('skew', 'search', '^(?:(?!^-?0?\.[0-4]\d*$).)*$') | list }}"

    - name: Create HTML report
      ansible.builtin.template:
        src: ntp_report_template.j2
        dest: /tmp/ntp_report.html
      vars:
        host_skew_list: "{{ filtered_host_skew_list }}"

    - name: Load previous email sent times
      ansible.builtin.slurp:
        path: /etc/ansible/facts.d/ntp_email_sent_times.json
      register: previous_email_sent_times
      ignore_errors: yes

    - name: Decode previous email sent times
      ansible.builtin.set_fact:
        email_sent_times: "{{ previous_email_sent_times['content'] | b64decode | from_json }}"
      when: previous_email_sent_times is defined and previous_email_sent_times['content'] is defined

    - name: Initialize email sent times if not present
      ansible.builtin.set_fact:
        email_sent_times: {}

    - name: Set current time
      ansible.builtin.set_fact:
        current_time: "{{ ansible_date_time.epoch | int }}"

    - name: Filter hosts that need email notifications
      ansible.builtin.set_fact:
        hosts_to_notify: >-
          {{ filtered_host_skew_list | selectattr('host', 'in', email_sent_times.keys() | map('regex_replace', '^(.*)$', '\1') | list) |
          selectattr('skew', 'search', '^(?:(?!^-?0?\.[0-4]\d*$).)*$') |
          selectattr('host', 'regex_replace', '^(.*)$', '\1') | selectattr('host', 'defined') | list }}

    - name: Send email with HTML report if there are any time skews outside the 0.5s range
      community.general.mail:
        host: smtp.your.mailserver.com
        port: 587
        username: your_username
        password: your_password
        to: recipient@example.com
        subject: "NTP Time Skew Report"
        body: "Please find the attached NTP time skew report."
        subtype: html
        attach:
          - /tmp/ntp_report.html
      when: hosts_to_notify | length > 0

    - name: Update email sent times
      ansible.builtin.set_fact:
        new_email_sent_times: >-
          {{
            email_sent_times | combine(
              hosts_to_notify | items2dict(
                key_name='host',
                value_name='skew'
              ) | map(
                'combine',
                { 'timestamp': current_time }
              ) | list | items2dict
            )
          }}

    - name: Save new email sent times
      copy:
        content: "{{ new_email_sent_times | to_json | b64encode }}"
        dest: /etc/ansible/facts.d/ntp_email_sent_times.json
      when: hosts_to_notify | length > 0




---
- name: shell script to get ntp offset
  become: yes 
  changeg_when: false 
  ansible.builtin.shell: /usr/sbin/chronyd -Q -5 'server {{ip_add}}'
  register: ntpoffset 

- name: get hostname from ip
  ansible.builtin.set_fact: 
    hostname: "{{ lookup('community.general.dig', ip_add qtype='PTR')}}"

- name: set dates
  ansible.builtin.shell: date
    resgister: time

- name: set fact for final object
  ansible.builtin.set_fact:
    final_object:
      date: "{{time.stdout}}"
      item.get_ntpoffset: "{{ntpoffset.stdout}}"
      get_hostname: "{{hostname}}"
      ip_add: "{{ip_add}}"


- name: set dates
  ansible.builtin.set_fact: 
    final_list: "{{final_list | default ([]) + [final_object]}}"


- name: Check NTP time skew and send report
  hosts: 1.2.3.4.5
  gather_facts: no
  become: true
  vars:
    specified_host: 1.2.3.4.5
    images: 
      - 2.3.4.5.6
    server_ip:
      - 3.4.5.6.7

  tasks:
    - name: get host ip
      ansible.builtin.set_fact:
        dig_list: "{{ dig_list | default([]) + query('community.general.dig', item)}}"
      loop: "{{images}}"

    - name: import object.yaml
      ansible.builtin.include_tasks: object.yaml
      loop: "{{dig_list + server_ip}}"
      loop_control:
        loop_var: ip_add

    - name: set fact time skew
      ansible.builtin.set_fact:
        final_skew: "{{ final_list | json_query('[*].get_ntpoffset') }}"

    - name: add item to alert_items
      ansible.builtin.set_fact:
        alert_items: "{{ alert_items | default([]) + [ item ] )}}"
      with_items: "{{final_skew}}"
      when: (item | float) >= 0.5 or (item | float) <= -0.5
    
    - name: collect gather
      delegated_to: specified_host
      run_once: true
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - date_time 

    - name: sect fact for test body
      ansible.builtin.set_fact:
        ntp_offset_report:
          <html>
          <head>
          <tr>
          <th> Date </th> <th> NTP Offset </th> <th> Hostname </th> <th> IP Address </th>
          </tr>
          </head>
          <body>
          <tr>
          {% for item in final_list %}
          <td> {{item.date}} </td> <td> {{item.get_offset}} </td> <td> {{item.get_hostname}} </td> <td> {{item.ip_add}} </td>
          </tr>
          {% endfor %}
          </body>
          </table>
          </html>
        dig_list: "{{ dig_list | default([]) + query('community.general.dig', item)}}"
      loop: "{{images}}"

    - name: creat log file 
      community.general.blockinfile:
        create: true
        path: /opt/example.html
        owner: root
        user: root
        mode: 0555
        marker: ""
        block: "{{ntp_offset_report}}"

    - name: Send email 
      ansible.builtin.set_fact:
        chrony_time_difference: |
          <p><strong> ======== Chrony Report ============</strong></p>
          {% for item in final_list -%}
            {% if item.get_ntpoffset | float >= 0.5 or item.get_ntpoffse | float <= 0.5 %}
            <strong> {{item.get_hostname}} {{item.ip_add}} {{item.get_ntpoffset }} was greater tahn 0.5 secs </strong>
          {% endif %}
          {% endfor %}
      when: alert_items is defined

    - name: Send email with HTML report if there are any time skews outside the 0.5s range
      community.general.mail:
        host: smtp.your.mailserver.com
        port: 587
        username: your_username
        password: your_password
        to: recipient@example.com
        subject: "NTP Time Skew Report"
        body: "{{chrony_time_difference}}"
        subtype: html






---
- name: shell script to get ntp offset
  become: yes
  changeg_when: false
  ansible.builtin.shell: /usr/sbin/chronyd -Q -5 'server {{ip_add}}'
  register: ntpoffset

- name: get hostname from ip
  ansible.builtin.set_fact:
    hostname: "{{ lookup('community.general.dig', ip_add, qtype='PTR')}}"

- name: set dates
  ansible.builtin.shell: date
  register: time

- name: set fact for final object
  ansible.builtin.set_fact:
    final_object:
      date: "{{ time.stdout }}"
      ntp_offset: "{{ ntpoffset.stdout }}"
      hostname: "{{ hostname }}"
      ip_add: "{{ ip_add }}"

- name: set dates
  ansible.builtin.set_fact:
    final_list: "{{ final_list | default([]) + [final_object] }}"

- name: Check NTP time skew and send report
  hosts: all
  gather_facts: no
  become: true
  vars:
    specified_host: 1.2.3.4.5
    images:
      - 2.3.4.5.6
    server_ip:
      - 3.4.5.6.7
    email_threshold_minutes: 20

  tasks:
    - name: get host ip
      ansible.builtin.set_fact:
        dig_list: "{{ dig_list | default([]) + query('community.general.dig', item) }}"
      loop: "{{ images }}"

    - name: import object.yaml
      ansible.builtin.include_tasks: object.yaml
      loop: "{{ dig_list + server_ip }}"
      loop_control:
        loop_var: ip_add

    - name: set fact time skew
      ansible.builtin.set_fact:
        final_skew: "{{ final_list | json_query('[*].ntp_offset') }}"

    - name: Add host to alert_items if skew is outside the threshold
      ansible.builtin.set_fact:
        alert_items: "{{ alert_items | default([]) + [ item ] }}"
      with_items: "{{ final_list }}"
      when: (item.ntp_offset | float) >= 0.5 or (item.ntp_offset | float) <= -0.5

    - name: Calculate last email sent time for each host
      ansible.builtin.set_fact:
        last_email_sent_time: "{{ hostvars[item.ip_add]['last_email_sent_time'] | default(0) }}"
      with_items: "{{ final_list }}"
      loop_control:
        loop_var: item

    - name: Send email if skew is outside the threshold and time since last email is greater than threshold
      ansible.builtin.set_fact:
        chrony_time_difference: |
          <p><strong> ======== Chrony Report ============</strong></p>
          {% for item in final_list %}
            {% if (item.ntp_offset | float) >= 0.5 or (item.ntp_offset | float) <= -0.5 %}
              <strong> {{ item.hostname }} {{ item.ip_add }} {{ item.ntp_offset }} was greater than 0.5 secs </strong>
            {% endif %}
          {% endfor %}
      when: alert_items is defined and (ansible_date_time.epoch|int - last_email_sent_time) > (email_threshold_minutes * 60)

    - name: Send email with HTML report if there are any time skews outside the 0.5s range
      community.general.mail:
        host: smtp.your.mailserver.com
        port: 587
        username: your_username
        password: your_password
        to: recipient@example.com
        subject: "NTP Time Skew Report"
        body: "{{ chrony_time_difference }}"
        subtype: html

    - name: Update last email sent time for each host
      ansible.builtin.set_fact:
        hostvars[item.ip_add]['last_email_sent_time']: "{{ ansible_date_time.epoch|int }}"
      with_items: "{{ final_list }}"


---
- name: shell script to get ntp offset
  become: yes 
  changed_when: false 
  ansible.builtin.shell: /usr/sbin/chronyd -Q -5 'server {{ip_add}}'
  register: ntpoffset 

- name: get hostname from ip
  ansible.builtin.set_fact: 
    hostname: "{{ lookup('community.general.dig', ip_add qtype='PTR')}}"

- name: set dates
  ansible.builtin.shell: date
  register: time

- name: set fact for final object
  ansible.builtin.set_fact:
    final_object:
      date: "{{ time.stdout }}"
      get_ntpoffset: "{{ ntpoffset.stdout }}"
      get_hostname: "{{ hostname }}"
      ip_add: "{{ ip_add }}"

- name: set fact for final list
  ansible.builtin.set_fact: 
    final_list: "{{ final_list | default([]) + [final_object] }}"

- name: Check NTP time skew and send report
  hosts: 1.2.3.4.5
  gather_facts: no
  become: true
  vars:
    specified_host: 1.2.3.4.5
    images: 
      - 2.3.4.5.6
    server_ip:
      - 3.4.5.6.7
    email_interval: 1200  # 20 minutes in seconds

  tasks:
    - name: get host ip
      ansible.builtin.set_fact:
        dig_list: "{{ dig_list | default([]) + query('community.general.dig', item) }}"
      loop: "{{ images }}"

    - name: import object.yaml
      ansible.builtin.include_tasks: object.yaml
      loop: "{{ dig_list + server_ip }}"
      loop_control:
        loop_var: ip_add

    - name: add item to alert_items
      ansible.builtin.set_fact:
        alert_items: "{{ alert_items | default([]) + [ item ] }}"
      with_items: "{{ final_list }}"
    
    - name: collect gather
      delegated_to: specified_host
      run_once: true
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - date_time 

    - name: set fact for ntp offset report
      ansible.builtin.set_fact:
        ntp_offset_report: |
          <html>
          <head>
          <tr>
          <th> Date </th> <th> NTP Offset </th> <th> Hostname </th> <th> IP Address </th>
          </tr>
          </head>
          <body>
          <tr>
          {% for item in final_list %}
          <td> {{ item.date }} </td> <td> {{ item.get_ntpoffset }} </td> <td> {{ item.get_hostname }} </td> <td> {{ item.ip_add }} </td>
          </tr>
          {% endfor %}
          </body>
          </table>
          </html>
        dig_list: "{{ dig_list | default([]) + query('community.general.dig', item) }}"
      loop: "{{ images }}"

    - name: create log file 
      community.general.blockinfile:
        create: true
        path: /opt/example.html
        owner: root
        group: root
        mode: '0555'
        marker: ""
        block: "{{ ntp_offset_report }}"

    - name: initialize last_email_sent fact if not defined
      ansible.builtin.set_fact:
        last_email_sent: {}
      when: last_email_sent is not defined

    - name: check and set email times for each host
      ansible.builtin.set_fact:
        send_email: "{{ send_email | default({}) | combine({item.get_hostname: (ntp_offset_time - last_email_sent.get(item.get_hostname, 0)) >= email_interval}) }}"
        last_email_sent: "{{ last_email_sent | combine({item.get

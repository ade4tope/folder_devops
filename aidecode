---
- name: Extract AIDE report entries
  hosts: all
  tasks:
    - name: Run AIDE parsing command
      ansible.builtin.shell: |
        awk '/^Added Entries:$/,/^Removed Entries:$/{if (!/^Added Entries:$|Removed Entries:$/) print "Added: "$0}
             /^Removed Entries:$/,/^Changed Entries:$/{if (!/^Removed Entries:$|^Changed Entries:$/) print "Removed: "$0}
             /^Changed Entries:$/,/^$/ {if (!/^Changed Entries:$|^$/ && $0 !~ /^Detailed information about changes:/) print "Changed: "$0}' /path/to/aide_report.txt
      register: aide_output

    - name: Display AIDE parsing results
      ansible.builtin.debug:
        msg: "{{ aide_output.stdout_lines }}"
- name: Run AIDE check on 5 servers
  hosts: all
  tasks:
    - name: Run AIDE check
      command: aide --check

- name: Gather and extract AIDE report values
  hosts: all
  gather_facts: no
  tasks:
    - name: Gather AIDE report
      shell: cat /var/log/aide/aide.log
      register: aide_report

    - name: Extract f+ and f- values
      set_fact:
        f_plus_values: "{{ aide_report.stdout | regex_findall('f\\+{4}:\\s+(\\S+)') }}"
        f_minus_values: "{{ aide_report.stdout | regex_findall('f-{4}:\\s+(\\S+)') }}"

- name: Compare results and print common values
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Compare values across servers
      set_fact:
        common_values: "{{ f_plus_values | intersect(f_minus_values) }}"

    - name: Print common values
      debug:
        msg: "Common values across servers: {{ common_values }}"
      when: common_values | length > 0

  handlers:
    - name: restart_service
      debug:
        msg: "Some values are common across the servers!"

- name: Set custom variables on target hosts
  hosts: targets
  tasks:
    - name: Example of setting a custom fact on each host
      set_fact:
        custom_variable: "Value from {{ inventory_hostname }}"

- name: Aggregate custom variables on the dedicated host
  hosts: dedicated
  tasks:
    - name: Initialize an empty list for our aggregated variables
      set_fact:
        aggregated_variables: []

    - name: Gather custom variables from each target host
      set_fact:
        aggregated_variables: "{{ aggregated_variables + [hostvars[item].custom_variable] }}"
      loop: "{{ groups['targets'] }}"

    - name: Display the aggregated variables
      debug:
        msg: "Aggregated Variables: {{ aggregated_variables }}"


- name: Run AIDE check on 5 servers
  hosts: all
  tasks:
    - name: Run AIDE check
      command: aide --check

- name: Gather AIDE report and extract f+ values
  hosts: all
  gather_facts: no
  tasks:
    - name: Gather AIDE report
      shell: cat /var/log/aide/aide.log
      register: aide_report

    - name: Extract f+ values
      set_fact:
        f_plus_values: "{{ aide_report.stdout | regex_findall('f\\+{4}:\\s+(\\S+)') }}"

- name: Compare f+ values across servers
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Aggregate f+ values
      set_fact:
        f_plus_values_all: "{{ f_plus_values_all | default([]) + f_plus_values }}"

    - name: Find common f+ values
      set_fact:
        common_f_plus_values: "{{ f_plus_values_all | groupby('identity') | selectattr('results|length', '==', 5) | map(attribute='identity') | list }}"

- name: Print common f+ values
  debug:
    msg: "Common f+ values across servers: {{ common_f_plus_values }}"

- hosts: localhost
  vars:
    paths:
      - /path/to/file1
      - /path/to/file2
      - /path/to/file1
      - /path/to/file3

  tasks:
    - name: Find duplicate paths
      debug:
        msg: "Duplicate path {{ item }} found {{ paths | select('equalto', item) | list | count }} times"
      loop: "{{ paths | unique }}"
      when: "{{ paths | select('equalto', item) | list | count }} > 1"


- hosts: localhost
  vars:
    paths:
      - /path/to/file1
      - /path/to/file2
      - /path/to/file1
      - /path/to/file3
    smtp_server: smtp.example.com
    smtp_port: 25
    smtp_username: your_username
    smtp_password: your_password
    sender_email: sender@example.com
    recipient_email: recipient@example.com

  tasks:
    - name: Find duplicate paths
      set_fact:
        duplicate_paths: "{{ duplicate_paths | default([]) + [item] }}"
      loop: "{{ paths | unique }}"
      when: "{{ paths | select('equalto', item) | list | count }} > 1"

    - name: Send email with duplicate paths
      mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        from: "{{ sender_email }}"
        to: "{{ recipient_email }}"
        subject: "Duplicate Paths Found"
        body: |
          The following paths were found duplicated:
          {% for path in duplicate_paths %}
          - {{ path }}
          {% endfor %}




---
- name: Identify and write out duplicates
  hosts: localhost
  vars:
    paths_to_search:
      - "/path/to/search1"
      - "/path/to/search2"
    output_file: "/path/to/duplicate_files.txt"
  tasks:
    - name: Find files in specified paths
      find:
        paths: "{{ item }}"
        file_type: file
      register: found_files
      loop: "{{ paths_to_search }}"
      # If you are checking in a lot of directories, consider adding 'ignore_errors: yes'

    - name: Calculate checksums for each file
      shell: "sha1sum {{ item.path }} | awk '{print $1}'"
      register: checksums
      loop: "{{ found_files.results | map(attribute='files') | flatten }}"
      loop_control:
        label: "{{ item.path }}"
      changed_when: False

    - name: Pair each file with its checksum
      set_fact:
        files_with_checksums: "{{ files_with_checksums | default([]) + [{ 'path': item.item.path, 'checksum': item.stdout }] }}"
      loop: "{{ checksums.results }}"
      loop_control:
        label: "{{ item.item.path }}"

    - name: Find duplicates based on checksum
      set_fact:
        duplicates: "{{ duplicates | default([]) + [item] }}"
      loop: "{{ files_with_checksums }}"
      when: files_with_checksums | selectattr('checksum','equalto',item.checksum) | list | length > 1
      loop_control:
        label: "{{ item.path }}"

    - name: Write out duplicates to a file
      copy:
        content: |
          {% for file in duplicates %}
          {{ file.path }}
          {% endfor %}
        dest: "{{ output_file }}"
      when: duplicates | length > 0
